import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

  private boolean debug = false;
  public boolean syntaxErrors = false;

  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

  public void syntax_error(Symbol current_token) {
    report_error(
    "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right, null
    );
	syntaxErrors = true;
  }

:};

// Do something with ILLEGAL_CHARARCTER or drop it.
terminal MAIN, BOOL, CHAR, DICT, INT, RAT, FLOAT, TOP, SEQ, IN, TRUE, FALSE, TDEF, FDEF, VOID, ALIAS, IF, ELIF, ELSE, FORALL, WHILE, READ, PRINT, RETURN, OD, DO, FI, LEN, LESSOREQUAL, ISEQUAL, NOTEQUAL, STARTCOMMENT, ENDCOMMENT, LCURLY, RCURLY, LSQUARE, RSQUARE, EQUAL, SEMICOL, PLUS, MINUS, MULT, DIV, LESSTHAN, LINECOMMENT, NOT, AND, OR, POWER, RARROW, DCOLON, COLON, INTEGER, IDENTIFIER, LET, CHARACTER, DTYPE;
terminal LPAREN, RPAREN;
terminal BADCHAR;

nonterminal statement, expr, func;

precedence left PLUS, MINUS;
precedence left DIV, MULT;

/* The grammar */
func ::= MAIN LCURLY RETURN SEMICOL RCURLY SEMICOL
		|
		MAIN LCURLY statement RETURN SEMICOL RCURLY SEMICOL
		|
		MAIN LCURLY statement RCURLY SEMICOL;
statement ::= expr SEMICOL;

expr ::= DTYPE expr EQUAL FLOAT
		|
		IDENTIFIER
		|
		PRINT expr
		|
		FLOAT
		|
		INTEGER;